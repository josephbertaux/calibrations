#!/bin/sh

# This script runs the full alignment workflow iteratively following the scheme
# setup in the tracking working group. The script takes a single argument
# which is a working directory to run things in. Right now the alignment
# state information is generated by ~300 6 pion events which are simulated by
# a F4A macro.

pwd
WORKDIR=$1

# Just make this 4 for now, could be changed later
NITER=1
echo "Working in "$WORKDIR
echo "Running alignment NITER: "$NITER
if [ ! -d $WORKDIR ] 
then
  echo "Making "$WORKDIR
  mkdir $WORKDIR
fi
cd $WORKDIR

source /opt/sphenix/core/bin/sphenix_setup.sh -n

git clone https://github.com/sPHENIX-Collaboration/calibrations.git
#this is just a branch with the alignment workflow set to be the default
git clone -b alignment https://github.com/osbornjd/macros.git

cd calibrations/TrackerMillepedeAlignment/
# makes an alignment file with all 0s since we have no alignment params initially
root -l -b -q makeAlignmentParams.C+'(true)'
mv data.txt initialAlignmentParamsFile.txt

# makes the initial dealignment file for simulation
root -l -b -q makeAlignmentParams.C+'(false)'
mv data.txt originalMisalignmentParamsFile.txt

# make the initial difference file which is just 0 (current params) - the initial survey (original dealignment file)
root -l -b -q subtract_updated_from_new_alignment.C+'("originalMisalignmentParamsFile.txt","initialAlignmentParamsFile.txt","localAlignmentParamsFile.txt")'

# Move the alignment file to macros for processing 
mv localAlignmentParamsFile.txt ../../macros/detectors/sPHENIX/

# now run jobs iteratively to improve alignment params
for (( i = 1; i <=$NITER; i++ ))
do
  echo "Iteration: "$i
  cd ../../macros/detectors/sPHENIX
  pwd
  echo $OFFLINE_MAIN

  # Blow up the covariances by some amount
  cov=500
  echo "cov is "$cov

  # Run a F4A macro to generate alignment state information from track fitting
  root -l -b Fun4All_G4_sPHENIX.C\(300,$cov,$cov,$cov,$cov\)

  # Run pede with output to produce residual information
  pede mille_steer.txt
  mv millepede.res ../../../calibrations/TrackerMillepedeAlignment/millepede_iter$i.res
 
  # run helical fitter
  pede mille_steer_helical.txt
  cp millepede.res ../../../calibrations/TrackerMillepedeAlignment/millepede_helical_iter$i.res

  cd ../../../calibrations/TrackerMillepedeAlignment

  # Process the pede results
  root -l -b -q process_millepede_results.C+\(\"millepede_iter$i.res\",\"new_alignment_corrections_iter$i.txt\"\)

  root -l -b -q process_millepede_results.C+\(\"millepede_helical_iter$i.res\",\"new_alignment_corrections_helical_iter$i.txt\",true\)

  # Bring most recent alignment params here to do addition/subtraction
  cp ../../macros/detectors/sPHENIX/localAlignmentParamsFile.txt .
  
  root -l -b -q add_new_current_alignment.C+\(\"localAlignmentParamsFile.txt\",\"new_alignment_corrections_iter$i.txt\",\"updatedAlignmentParams_iter$i.txt\"\)

  root -l -b -q add_new_current_alignment.C+\(\"localAlignmentParamsFile.txt\",\"new_alignment_corrections_helical_iter$i.txt\",\"updatedAlignmentParamsHelical_iter$i.txt\"\)

  root -l -b -q subtract_updated_from_new_alignment.C+\(\"originalMisalignmentParamsFile.txt\",\"updatedAlignmentParams_iter$i.txt\",\"differenceAlignmentParams_$i.txt\"\)

  root -l -b -q subtract_updated_from_new_alignment.C+\(\"originalMisalignmentParamsFile.txt\",\"updatedAlignmentParamsHelical_iter$i.txt\",\"differenceAlignmentParamsHelical_$i.txt\"\)

  # have to choose one to continue iterating, default to helical version for now
  cp differenceAlignmentParamsHelical_$i.txt ../../macros/detectors/sPHENIX/localAlignmentParamsFile.txt

  root -l -b -q plot_alignment_residuals.C+\(\"differenceAlignmentParams_$i.txt\",\"alignment_residuals_$i.root\"\)
  
  root -l -b -q plot_alignment_residuals.C+\(\"differenceAlignmentParamsHelical_$i.txt\",\"alignment_residualsHelical_$i.root\"\)
done

# once we are done plot the residuals and then ship the alignment params file to the CDB

echo "Finished processing alignment workflow"
